#include <gtest/gtest.h>
#include <vector>
#include "LekaController.hpp"
#include "LekaController.cpp"

using namespace std;

class LekaControllerTest : public ::testing::Test
{
protected:
	void SetUp() override
	{
		lkctlr_one_value_zero.setCommandGroup(vector<uint8_t>({0x00}));
		lkctlr_one_value_zero.checksumBSD();
		lkctlr_one_value.setCommandGroup(vector<uint8_t>({0xFF}));
		lkctlr_one_value.checksumBSD();

		lkctlr_one_led.setCommandGroup(vector<uint8_t>({0x15, 0x00, 0xFF, 0x00, 0x00}));
		lkctlr_one_led.checksumBSD();

		lkctlr_all_leds_one_by_one.setCommandGroup(vector<uint8_t>({0x15, 0x00, 0x33, 0x00, 0x00, 0x15, 0x01, 0x66, 0x00, 0x00, 0x15, 0x02, 0x99, 0x00, 0x00, 0x15, 0x03,
															   0xCC, 0x00, 0x00, 0x15, 0x04, 0xFF, 0x00, 0x00, 0x15, 0x05, 0x00, 0x00, 0x00, 0x15, 0x06, 0x00, 0x33,
															   0x00, 0x15, 0x07, 0x00, 0x66, 0x00, 0x15, 0x08, 0x00, 0x99, 0x00, 0x15, 0x09, 0x00, 0xCC, 0x00, 0x15,
															   0x0A, 0x00, 0xFF, 0x00, 0x15, 0x0B, 0x00, 0x00, 0x00, 0x15, 0x0C, 0x00, 0x00, 0x33, 0x15, 0x0D, 0x00,
															   0x00, 0x66, 0x15, 0x0E, 0x00, 0x00, 0x99, 0x15, 0x0F, 0x00, 0x00, 0xCC, 0x15, 0x10, 0xFF, 0x00, 0x00,
															   0x15, 0x11, 0x00, 0xFF, 0x00, 0x15, 0x12, 0x00, 0x00, 0xFF, 0x15, 0x13, 0xFF, 0xFF, 0xFF}));
		lkctlr_all_leds_one_by_one.checksumBSD();

		lkctlr_range_leds.setCommandGroup(vector<uint8_t>({0x14, 0x04, 0x0E, 0xFF, 0x00, 0x00}));
		lkctlr_range_leds.checksumBSD();
		lkctlr_all_leds.setCommandGroup(vector<uint8_t>({0x13, 0xFF, 0x00, 0x00}));
		lkctlr_all_leds.checksumBSD();

		lkctlr_all_motors.setCommandGroup(vector<uint8_t>({0x21, 0x01, 0xFF}));
		lkctlr_all_motors.checksumBSD();
		lkctlr_duo_motors.setCommandGroup(vector<uint8_t>({0x22, 0x01, 0xFF, 0x01, 0xFF}));
		lkctlr_duo_motors.checksumBSD();
		lkctlr_left_motor.setCommandGroup(vector<uint8_t>({0x23, 0x01, 0xFF}));
		lkctlr_left_motor.checksumBSD();
		lkctlr_right_motor.setCommandGroup(vector<uint8_t>({0x24, 0x01, 0xFF}));
		lkctlr_right_motor.checksumBSD();
	}
	//   void TearDown() override {}

	LekaController lkctlr_empty;

	LekaController lkctlr_one_value_zero;
	LekaController lkctlr_one_value;

	LekaController lkctlr_two_value;

	LekaController lkctlr_one_led;
	LekaController lkctlr_all_leds_one_by_one;

	LekaController lkctlr_range_leds;
	LekaController lkctlr_all_leds;

	LekaController lkctlr_all_motors;
	LekaController lkctlr_duo_motors;
	LekaController lkctlr_right_motor;
	LekaController lkctlr_left_motor;
};

TEST_F(LekaControllerTest, IsEmptyInitially)
{
	EXPECT_EQ(lkctlr_empty.getCommandGroup(), vector<uint8_t>({}));
}

TEST_F(LekaControllerTest, OperateOneValue0x00)
{

	EXPECT_EQ(lkctlr_one_value_zero.getCommandGroup(), vector<uint8_t>({0x00}));
	EXPECT_EQ(lkctlr_one_value_zero.getChecksum(), uint8_t(0));
}

TEST_F(LekaControllerTest, OperateOneValue0xFF)
{
	EXPECT_EQ(lkctlr_one_value.getCommandGroup(), vector<uint8_t>({0xFF}));
	EXPECT_EQ(lkctlr_one_value.getChecksum(), uint8_t(0xFF));
}

TEST_F(LekaControllerTest, OperateTwoValues)
{
	{
		lkctlr_two_value.setCommandGroup(vector<uint8_t>({0x00, 0xFF}));
		lkctlr_two_value.checksumBSD();
		EXPECT_EQ(lkctlr_two_value.getCommandGroup(), vector<uint8_t>({0x00, 0xFF}));
		EXPECT_EQ(lkctlr_two_value.getChecksum(), uint8_t(0xFF));
	}

	{
		lkctlr_two_value.setCommandGroup(vector<uint8_t>({0x01, 0xFF}));
		lkctlr_two_value.checksumBSD();
		EXPECT_EQ(lkctlr_two_value.getCommandGroup(), vector<uint8_t>({0x01, 0xFF}));
		EXPECT_EQ(lkctlr_two_value.getChecksum(), uint8_t(0x00));
	}

	{
		lkctlr_two_value.setCommandGroup(vector<uint8_t>({0xFF, 0x01}));
		lkctlr_two_value.checksumBSD();
		EXPECT_EQ(lkctlr_two_value.getCommandGroup(), vector<uint8_t>({0xFF, 0x01}));
		EXPECT_EQ(lkctlr_two_value.getChecksum(), uint8_t(0x00));
	}
}

TEST_F(LekaControllerTest, OperateOneLed)
{
	EXPECT_EQ(lkctlr_one_led.getCommandGroup(), vector<uint8_t>({0x15, 0x00, 0xFF, 0x00, 0x00}));
	EXPECT_EQ(lkctlr_one_led.getChecksum(), uint8_t(0x14));
}

TEST_F(LekaControllerTest, OperateAllLedsOneByOne)
{
	EXPECT_EQ(lkctlr_all_leds_one_by_one.getCommandGroup(), vector<uint8_t>({0x15, 0x00, 0x33, 0x00, 0x00, 0x15, 0x01, 0x66, 0x00, 0x00, 0x15, 0x02, 0x99, 0x00, 0x00, 0x15, 0x03,
																		0xCC, 0x00, 0x00, 0x15, 0x04, 0xFF, 0x00, 0x00, 0x15, 0x05, 0x00, 0x00, 0x00, 0x15, 0x06, 0x00, 0x33,
																		0x00, 0x15, 0x07, 0x00, 0x66, 0x00, 0x15, 0x08, 0x00, 0x99, 0x00, 0x15, 0x09, 0x00, 0xCC, 0x00, 0x15,
																		0x0A, 0x00, 0xFF, 0x00, 0x15, 0x0B, 0x00, 0x00, 0x00, 0x15, 0x0C, 0x00, 0x00, 0x33, 0x15, 0x0D, 0x00,
																		0x00, 0x66, 0x15, 0x0E, 0x00, 0x00, 0x99, 0x15, 0x0F, 0x00, 0x00, 0xCC, 0x15, 0x10, 0xFF, 0x00, 0x00,
																		0x15, 0x11, 0x00, 0xFF, 0x00, 0x15, 0x12, 0x00, 0x00, 0xFF, 0x15, 0x13, 0xFF, 0xFF, 0xFF}));
	EXPECT_EQ(lkctlr_all_leds_one_by_one.getChecksum(), uint8_t(0x54));
}
